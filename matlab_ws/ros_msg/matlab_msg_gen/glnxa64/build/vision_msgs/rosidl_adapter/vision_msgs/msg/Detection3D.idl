// generated from rosidl_adapter/resource/msg.idl.em
// with input from vision_msgs/msg/Detection3D.msg
// generated code does not contain a copyright notice

#include "sensor_msgs/msg/PointCloud2.idl"
#include "std_msgs/msg/Header.idl"
#include "vision_msgs/msg/BoundingBox3D.idl"
#include "vision_msgs/msg/ObjectHypothesisWithPose.idl"

module vision_msgs {
  module msg {
    @verbatim (language="comment", text=
      "Defines a 3D detection result." "\n"
      "" "\n"
      "This extends a basic 3D classification by including position information," "\n"
      "  allowing a classification result for a specific position in an image to" "\n"
      "  to be located in the larger image.")
    struct Detection3D {
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "Class probabilities. Does not have to include hypotheses for all possible" "\n"
        "  object ids, the scores for any ids not listed are assumed to be 0.")
      sequence<vision_msgs::msg::ObjectHypothesisWithPose> results;

      @verbatim (language="comment", text=
        "3D bounding box surrounding the object.")
      vision_msgs::msg::BoundingBox3D bbox;

      @verbatim (language="comment", text=
        "The 3D data that generated these results (i.e. region proposal cropped out of" "\n"
        "  the image). This information is not required for all detectors, so it may" "\n"
        "  be empty.")
      sensor_msgs::msg::PointCloud2 source_cloud;

      @verbatim (language="comment", text=
        "If this message was tracking result, this field set true.")
      boolean is_tracking;

      @verbatim (language="comment", text=
        "ID used for consistency across multiple detection messages. This value will" "\n"
        "  likely differ from the id field set in each individual ObjectHypothesis." "\n"
        "If you set this field, be sure to also set is_tracking to True.")
      string tracking_id;
    };
  };
};
